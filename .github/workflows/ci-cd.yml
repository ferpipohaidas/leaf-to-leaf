name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Build application
      run: npm run build

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/leaf-to-leaf:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to VPS via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |
          # Navegar al directorio del proyecto
          cd /home/${{ secrets.SSH_USER }}/leaf-to-leaf || cd /opt/leaf-to-leaf || mkdir -p /home/${{ secrets.SSH_USER }}/leaf-to-leaf && cd /home/${{ secrets.SSH_USER }}/leaf-to-leaf
          
          # Descargar la nueva imagen
          docker pull ${{ secrets.DOCKER_USERNAME }}/leaf-to-leaf:latest
          
          # Detener contenedores existentes
          docker-compose down || true
          
          # Iniciar con la nueva imagen
          docker-compose up -d
          
          # Limpiar im√°genes no utilizadas
          docker image prune -f 